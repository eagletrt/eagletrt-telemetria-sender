"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../../types");
;
var BsonGenerator = /** @class */ (function (_super) {
    __extends(BsonGenerator, _super);
    function BsonGenerator(structure) {
        var _this = _super.call(this, structure) || this;
        _this.keys = [];
        _this.indentation = 0;
        _this.depth = 0;
        _this.forDepth = 0;
        _this.comment = '{{GENERATE_BSON}}';
        _this.generate();
        return _this;
    }
    BsonGenerator.prototype.print = function (str) {
        this.code += "" + this.indentationTabs + str + "\n";
    };
    Object.defineProperty(BsonGenerator.prototype, "maxDepth", {
        get: function () {
            return this.getDepth(this.structure);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsonGenerator.prototype, "parsedDepth", {
        get: function () {
            return (this.depth === 0 ? '*bson_document' : "&children[" + (this.depth - 1) + "]");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsonGenerator.prototype, "parsedForDepth", {
        get: function () {
            switch (this.forDepth) {
                case 0:
                    return 'i';
                case 1:
                    return 'j';
                case 2:
                    return 'k';
                default:
                    return "k" + (this.forDepth - 3);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsonGenerator.prototype, "parsedKeys", {
        get: function () {
            var _this = this;
            return this.keys.reduce(function (acc, curr) { return acc + _this.parseKey(curr); }, '').replace('.', '->');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsonGenerator.prototype, "currentKey", {
        get: function () {
            var last = this.keys[this.keys.length - 1];
            return last.type === 'array' ? '0' : last.key;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsonGenerator.prototype, "indentationTabs", {
        get: function () {
            return Array(this.indentation)
                .fill('\t')
                .join('');
        },
        enumerable: true,
        configurable: true
    });
    BsonGenerator.prototype.getDepth = function (structure) {
        var res;
        if (Array.isArray(structure)) {
            res = 1 + this.getDepth(structure[0]);
        }
        else if (typeof structure === 'object') {
            var max = 0;
            for (var key in structure) {
                if (typeof structure[key] === 'object') {
                    var n = 1 + this.getDepth(structure[key]);
                    max = (n > max) ? n : max;
                }
            }
            res = max;
        }
        else {
            res = 0;
        }
        return res;
    };
    BsonGenerator.prototype.parseKey = function (key) {
        switch (key.type) {
            case 'array':
                return "[" + key.key + "]";
            case 'object':
                return "." + key.key;
        }
    };
    BsonGenerator.prototype.parsePrimitive = function (data) {
        switch (data) {
            case 'int':
                this.print("BSON_APPEND_INT32(" + this.parsedDepth + ", \"" + this.currentKey + "\", data" + this.parsedKeys + ");");
                break;
            case 'long':
                this.print("BSON_APPEND_INT64(" + this.parsedDepth + ", \"" + this.currentKey + "\", data" + this.parsedKeys + ");");
                break;
            case 'double':
                this.print("BSON_APPEND_DOUBLE(" + this.parsedDepth + ", \"" + this.currentKey + "\", data" + this.parsedKeys + ");");
                break;
            case 'char*':
                this.print("BSON_APPEND_UTF8(" + this.parsedDepth + ", \"" + this.currentKey + "\", data" + this.parsedKeys + ");");
                break;
        }
    };
    BsonGenerator.prototype.parseObject = function (data) {
        var oldDepth = this.parsedDepth;
        this.depth++;
        var newDepth = this.parsedDepth;
        this.print("BSON_APPEND_DOCUMENT_BEGIN(" + oldDepth + ", \"" + this.currentKey + "\", " + newDepth + ");");
        for (var key in data) {
            this.keys.push({ type: 'object', key: key });
            this.parse(data[key]);
            this.keys.pop();
        }
        this.print("bson_append_document_end(" + oldDepth + ", " + newDepth + ");");
        this.print("bson_destroy(" + newDepth + ");");
        this.depth--;
    };
    BsonGenerator.prototype.parseArray = function (data) {
        var oldDepth = this.parsedDepth;
        this.depth++;
        var newDepth = this.parsedDepth;
        var counter = this.parsedForDepth;
        this.forDepth++;
        this.print("BSON_APPEND_ARRAY_BEGIN(" + oldDepth + ", \"" + this.currentKey + "\", " + newDepth + ");");
        this.print("for (int " + counter + " = 0; " + counter + " < (data" + this.parsedKeys + "_count); " + counter + "++)");
        this.print("{");
        this.indentation++;
        this.keys.push({ key: counter, type: 'array' });
        this.parse(data[0]);
        this.keys.pop();
        this.indentation--;
        this.print("}");
        this.print("bson_append_array_end(" + oldDepth + ", " + newDepth + ");");
        this.print("bson_destroy(" + newDepth + ");");
        this.depth--;
        this.forDepth--;
    };
    BsonGenerator.prototype.parse = function (data) {
        if (Array.isArray(data)) {
            this.parseArray(data);
        }
        else if (typeof data === 'object') {
            this.parseObject(data);
        }
        else {
            this.parsePrimitive(data);
        }
    };
    BsonGenerator.prototype.firstParse = function (data) {
        for (var key in data) {
            this.keys.push({ key: key, type: 'object' });
            this.parse(data[key]);
            this.keys.pop();
        }
    };
    BsonGenerator.prototype.generate = function () {
        this.print("*bson_document = bson_new();");
        this.print("bson_t *children = (bson_t*)malloc(sizeof(bson_t) * " + this.maxDepth + ");");
        this.firstParse(this.structure);
    };
    return BsonGenerator;
}(types_1.Generator));
exports.generator = BsonGenerator;
//# sourceMappingURL=bson.generator.js.map