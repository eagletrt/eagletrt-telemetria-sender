"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var structureGenerator_1 = require("./structureGenerator");
var StructureTypeGenerator = /** @class */ (function (_super) {
    __extends(StructureTypeGenerator, _super);
    function StructureTypeGenerator(structure) {
        var _this = _super.call(this, structure) || this;
        _this.indentation = 0;
        _this.structs = [];
        _this.cursor = -1;
        _this.comment = '{{GENERATE_STRUCTURE_TYPE}}';
        _this.generate();
        return _this;
    }
    StructureTypeGenerator.prototype.print = function (str) {
        this.structs[this.cursor] += "" + this.indentationTabs + str + "\n";
    };
    Object.defineProperty(StructureTypeGenerator.prototype, "structName", {
        get: function () {
            return this.keys.length === 1 ? this.keys[0] : this.keys.slice(1).join('_') + "_data";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StructureTypeGenerator.prototype, "indentationTabs", {
        get: function () {
            return Array(this.indentation)
                .fill('\t')
                .join('');
        },
        enumerable: true,
        configurable: true
    });
    StructureTypeGenerator.prototype.addStruct = function () {
        this.structs.splice(this.cursor + 1, 0, '');
    };
    StructureTypeGenerator.prototype.parse = function (data, name) {
        this.addStruct();
        this.keys.push(name);
        this.cursor++;
        this.indentation = 0;
        this.print("typedef struct {");
        this.indentation = 1;
        for (var key in data) {
            if (Array.isArray(data[key])) {
                this.parse(data[key][0], key);
                this.print(this.structName + " *" + key + ";");
                this.print("int " + this.countName + ";");
                this.keys.pop();
            }
            else if (typeof data[key] === 'object') {
                this.parse(data[key], key);
                this.print(this.structName + " " + key + ";");
                this.keys.pop();
            }
            else {
                this.print(data[key] + " " + key + ";");
            }
        }
        this.indentation = 0;
        this.print("} " + this.structName + ";");
        this.indentation = 1;
        this.cursor--;
    };
    StructureTypeGenerator.prototype.generate = function () {
        this.parse(this.structure, 'data_t');
        this.code = this.structs.reverse().join('\n');
    };
    return StructureTypeGenerator;
}(structureGenerator_1.StructureGenerator));
exports.generator = StructureTypeGenerator;
//# sourceMappingURL=structure-type.generator.js.map