"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var structureGenerator_1 = require("./structureGenerator");
var StructureAllocatorGenerator = /** @class */ (function (_super) {
    __extends(StructureAllocatorGenerator, _super);
    function StructureAllocatorGenerator(structure) {
        var _this = _super.call(this, structure) || this;
        _this.comment = '{{GENERATE_STRUCTURE_ALLOCATOR}}';
        _this.generate();
        return _this;
    }
    StructureAllocatorGenerator.prototype.parse = function (data) {
        for (var key in data) {
            if (Array.isArray(data[key])) {
                this.keys.push(key);
                var keys = this.propName;
                var keysCount = this.propCountName;
                var type = this.structName;
                this.print("data" + keys + " = (" + type + "*) malloc(sizeof(" + type + ") * " + data[key][1] + ");");
                this.print("data" + keysCount + " = 0;");
                this.parse(data[key][0]);
                this.keys.pop();
            }
            else if (typeof data[key] === 'object') {
                this.keys.push(key);
                this.parse(data[key]);
                this.keys.pop();
            }
        }
    };
    StructureAllocatorGenerator.prototype.generate = function () {
        this.parse(this.structure);
    };
    return StructureAllocatorGenerator;
}(structureGenerator_1.StructureGenerator));
exports.generator = StructureAllocatorGenerator;
//# sourceMappingURL=structure-allocator.generator.js.map