
.. _program_listing_file_utils_config_utils_jsmn_jsmn.h:

Program Listing for File jsmn.h
===============================

|exhale_lsh| :ref:`Return to documentation for file <file_utils_config_utils_jsmn_jsmn.h>` (``utils/config_utils/jsmn/jsmn.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef __JSMN_H_
   #define __JSMN_H_
   
   #include <stddef.h>
   
   #ifdef __cplusplus
   extern "C" {
   #endif
   
   typedef enum {
       JSMN_PRIMITIVE = 0,
       JSMN_OBJECT = 1,
       JSMN_ARRAY = 2,
       JSMN_STRING = 3
   } jsmntype_t;
   
   typedef enum {
       /* Not enough tokens were provided */
       JSMN_ERROR_NOMEM = -1,
       /* Invalid character inside JSON string */
       JSMN_ERROR_INVAL = -2,
       /* The string is not a full JSON packet, more bytes expected */
       JSMN_ERROR_PART = -3
   } jsmnerr_t;
   
   typedef struct {
       jsmntype_t type;
       int start;
       int end;
       int size;
   #ifdef JSMN_PARENT_LINKS
       int parent;
   #endif
   } jsmntok_t;
   
   typedef struct {
       unsigned int pos; /* offset in the JSON string */
       unsigned int toknext; /* next token to allocate */
       int toksuper; /* superior token node, e.g parent object or array */
   } jsmn_parser;
   
   void jsmn_init(jsmn_parser *parser);
   
   jsmnerr_t jsmn_parse(jsmn_parser *parser, const char *js, size_t len,
           jsmntok_t *tokens, unsigned int num_tokens);
   
   #ifdef __cplusplus
   }
   #endif
   
   #endif /* __JSMN_H_ */
